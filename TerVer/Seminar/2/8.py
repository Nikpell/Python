import scipy.stats as stats
import numpy as np
import matplotlib.pyplot as plt

# Проведено 4 эксперимента. Для каждого построить график и посчитать коэффициенты
# корреляции Пирсона.
# x = np.array([10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5])
# y = np.array([8.04, 6.95, 7.58, 8.81, 8.33, 9.96, 7.24, 4.26, 10.84, 4.82, 5.68 ])
# x2 = np.array([10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5])
# y2 = np.array([9.14, 8.14, 8.74, 8.77, 9.26, 8.10, 6.13, 3.10, 9.13, 7.26, 4.74])
# x3 = np.array([10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5])
# y3 = np.array([7.46, 6.77, 12.74, 7.11, 7.81, 8.84, 6.08, 5.39, 8.15, 6.42, 5.73])
# x4 = np.array([8, 8, 8, 8, 8, 8, 8, 19, 8, 8, 8])
# y4 = np.array([6.58, 5.76, 7.71, 8.84, 8.47, 7.04, 5.25, 12.5, 5.56, 7.91, 6.89])
# x0 = np.array([10, 8, 13, 9, 11, 14, 6, 4, 12, 7,5, 15, 16, 18])
# y0 = np.array([9.14, 8.14, 8.74, 8.77, 9.26, 8.10, 6.13, 3.10, 9.13, 7.26, 4.74, 6.5, 5, 2.9])
# all_array = [[x, y], [x2, y2], [x3, y3], [x4, y4], [x0, y0]]
# for item in all_array:
#     print(np.corrcoef(item[0], item[1]))
#     plt.scatter(item[0], item[1])
#     plt.title(f'r= {np.corrcoef(item[0], item[1])[0][1]}')
#     plt.xlabel('x')
#     plt.ylabel('y')
#     plt.show()

# 2 Провести двусторонний тест и ответить на вопрос, есть ли статистически значимые
# различия между средними 2х нормально распределенных генеральных совокупностей,
# представленных следующими независимыми выборками:
#  a = np.array([12, 10, 11, 19, 13, 11, 17, 15, 19, 14, 21, 18, 21, 11, 17, 14, 15, 17, 20, 19])
#  b = np.array([11, 13, 18, 15, 17, 18, 10, 21, 26, 15, 11, 12, 15, 17, 10, 18, 18, 12,21, 20])
# Уровень статистической значимости принять за 5%
# 1 . Используйте функцию в Python:
# 2. Имея p-value из функции рассчитать наблюдаемое значение критерия.
a = np.array([12, 10, 11, 19, 13, 11, 17, 15, 19, 14, 21, 18, 21, 11, 17, 14, 15, 17, 20, 19])
b = np.array([11, 13, 18, 15, 17, 18, 10, 21, 26, 15, 11, 12, 15, 17, 10, 18, 18, 12,21, 20])
print(np.corrcoef(a, b))
print(stats.mannwhitneyu(a, b))
print(stats.ttest_ind(a, b, equal_var=True))
# 3 Используя функцию stats.ttest_ind, проведите односторонний
# тест. Проверить ,что мю 1 > мю 2
print(stats.ttest_ind(a, b,alternative='greater', equal_var = True))