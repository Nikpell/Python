#!/usr/bin/env python
# coding: utf-8

# ## Условие 2:
#   На складе лежат разные фрукты в разном количестве.
# Нужно написать функцию, которая на вход принимает любое количество названий фруктов и их количество, а возвращает общее количество фруктов на складе

# In[8]:


def sum_fruits(**kwargs) -> int:
    return sum(kwargs.values())

sum_fruits(ban = 1, mang = 2, vet = 3)


# ## Условие 3:
# Дан список с затратами на рекламу. Но в данных есть ошибки, некоторые затраты имеют отрицательную величину. Удалите такие значения из списка и посчитайте суммарные затраты. Используйте list comprehensions
# 

# In[14]:


spend = [100, 125, -90, 345, 655, -1, 0, 200]


# In[ ]:


true_spend = list(filter(lambda x: x >= 0, spend))
true_spend_2 = [item for item in spend if item >=0]


# ## Условие 4
# Даны два списка.
# ### 4.1 Найдите, какая выручка у компании в ноябре
# Используйте list comprehensions
# ### 4.2 Найдите выручку компании в зависимости от месяца
# Для этого напишите функцию, которая на вход принимает список с датами и список с выручкой, а на выходе словарь, где ключи - это месяцы, а значения - это выручка.
# Используйте аннотирование типов.

# In[25]:


date_of_buy = ['2021-09-14', '2021-12-15', '2021-09-08', '2021-12-05', '2021-10-09', '2021-09-30', '2021-12-22', 
               '2021-11-29', '2021-12-24', '2021-11-26', '2021-10-27', '2021-12-18', '2021-11-09', '2021-11-23', 
               '2021-09-27', '2021-10-02', '2021-12-27', '2021-09-20', '2021-12-13', '2021-11-01', '2021-11-09', 
               '2021-12-06', '2021-12-08', '2021-10-09', '2021-10-31', '2021-09-30', '2021-11-09', '2021-12-13',
               '2021-10-26', '2021-12-09']
revenue = [1270, 8413, 9028, 3703, 5739, 4095, 295, 4944, 5723, 3701, 4471, 651, 7037, 4274, 6275, 4988, 6930,
                2971, 6592, 2004, 2822, 519, 3406, 2732, 5015, 2008, 316, 6333, 5700, 2887]


# In[43]:


month_of_buy = [item[5:7] for item in date_of_buy]
revenue_of_nov = [revenue[i] for i in range(len(month_of_buy)) if month_of_buy[i] == '09']
sum(revenue_of_nov)


# In[44]:


def revenue_of_month(lis1: list, lis2: list) ->dict:
    month_revenue = dict()
    lis1 = [item[5:7] for item in lis1]
    for i in range(len(lis1)):
        if month_revenue.get(lis1[i]) == None:
            month_revenue[lis1[i]] = lis2[i]
        else: month_revenue[lis1[i]] += lis2[i]
    return month_revenue      
revenue_of_month(date_of_buy, revenue)


# In[ ]:




