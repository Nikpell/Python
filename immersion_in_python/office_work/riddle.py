""""
Создайте модуль с функцией внутри.
Функция получает на вход загадку, список с возможными вариантами отгадок и
количество попыток на угадывание.
Программа возвращает номер попытки, с которой была отгадана загадка или ноль,
если попытки исчерпаны.

Добавьте в модуль с загадками функцию, которая хранит словарь списков.
Ключ словаря - загадка, значение - список с отгадками.
Функция в цикле вызывает загадывающую функцию, чтобы передать ей все свои загадки.

Добавьте в модуль с загадками функцию, которая принимает на вход строку (текст загадки)
и число (номер попытки, с которой она угадана).
Функция формирует словарь с информацией о результатах отгадывания.
Для хранения используйте защищённый словарь уровня модуля.
Отдельно напишите функцию, которая выводит результаты угадывания из защищённого словаря
в удобном для чтения виде.
Для формирования результатов используйте генераторное выражение.
"""
_dict_riddle = {}


def answer(str_ask, list_anser, amount):
    print(str_ask)
    count = 1
    while count <= amount:
        answer_quest = input('Введите ваш ответ: ')
        if answer_quest == list_anser[0]:
            return count
        else:
            count += 1
    return 0


def ask_riddle_dict() -> object:
    counter = 0
    riddle = {'цвет лимона': ['желтый', 'зеленый', 'синий', 'оранжевый'],
              'в радуге нет цвета': ['черный', 'желтый', 'зеленый', 'синий', 'оранжевый'],
              '2+2': ['4', '2', '3', '1', '5'],

              }
    for key in riddle:
        counter = answer(key, riddle[key], 3)
    yield counter



def smf():
    pass
