# Пользователь вводит строку из четырёх
# или более целых чисел, разделённых символом “/”.
#
# Сформируйте словарь, где:
# второе и третье число являются ключами.
# первое число является значением для первого ключа.
# четвертое и все возможные последующие числа
# хранятся в кортеже как значения второго ключа.

def dict_from_input(sameth):
    a, b, c, *d = sameth.split('/')
    d = list(map(int, d))
    dict_ = {int(b): int(a),
             int(c): tuple(d)
             }
    return dict_


# Самостоятельно сохраните в переменной строку текста.
# Создайте из строки словарь, где ключ — буква, а значение — код буквы.
# Напишите преобразование в одну строку.

def string_to_dict(text):
    dict_ = {x: ord(x) for x in text}
    return dict_


# Продолжаем развивать задачу 2.
# Возьмите словарь, который вы получили.
# Сохраните его итератор.
# Далее выведите первые 5 пар ключ-значение,
# обращаясь к итератору, а не к словарю.
def dict_to_iter(dict_):
    it = iter(dict_.items())
    for i in range(5):
        print(next(it))


# Создайте генератор чётных чисел от нуля до 100.
# Из последовательности исключите
# числа, сумма цифр которых равна 8.
# Решение в одну строку.

def gen_even():
    gen_ = (i for i in range(0, 100, 2) if sum([int(x) for x in str(i)]) != 8)
    return gen_


# Напишите программу, которая выводит
# на экран числа от 1 до 100.
# При этом вместо чисел, кратных трем,
# программа должна выводить слово «Fizz»
# Вместо чисел, кратных пяти — слово «Buzz».
# Если число кратно и 3, и 5, то программа
# должна выводить слово «FizzBuzz».
# *Превратите решение в генераторное выражение.


def fizzbuzz(smt):
    letter: str = ''
    if smt % 3 == 0:
        letter += 'Fizz'
    if smt % 5 == 0:
        letter += 'Buzz'
    if letter == '':
        return smt
    return letter


def gen_fizzbuzz():
    return (fizzbuzz(i) for i in range(1, 101))


# Выведите в консоль таблицу умножения
# от 2х2 до 9х10 как на школьной тетрадке.
# Таблицу создайте в виде однострочного генератора, где каждый элемент генератора —
# отдельный пример таблицы умножения.
# Для вывода результата используйте «принт»
# без перехода на новую строку.

# gen_tab = (f'{i} * {j} = {i * j}' for i in range(2, 10) for j in range(2, 11))
#
# temp = 2
# for x in gen_tab:
#     if temp == 11:
#         temp = 2
#         print()
#     print(x, end='\t')
#     temp += 1

# Создайте функцию-генератор.
# Функция генерирует N простых чисел,
# начиная с числа 2.
# Для проверки числа на простоту используйте правило: «число является простым,
# если делится нацело только на единицу и на себя».

def simple(smth):
    for i in range(2, int(smth ** 0.5) + 1):
        if smth % i == 0:
            return False
    return True


def print_simple(num):
    gen_simple = (i for i in range(2, 1_000_000) if simple(i))
    for x in range(num):
        print(next(gen_simple))


# text = "Самостоятельно сохраните в переменной строку текста. Создайте из строки словарь, "
# print(dict_from_input("1/2/3/4"))
# print(string_to_dict(text))
# dict_to_iter(string_to_dict(text))
print_simple(10)